#!/usr/bin/env python3

import requests
import logging
import time
import sys

from elasticsearch import Elasticsearch

es = Elasticsearch()

# Constants
INDEX_NAME = 'conflux'
TYPE_MOVIES = 'movies'
GUIDEBOX_HOST = 'https://api-public.guidebox.com'
GUIDEBOX_VER = 'v1.43'
GUIDEBOX_REGION_US = 'US'
GUIDEBOX_API_KEY = 'rKaLPYRwwXYRIwNHYtcEXTvbvlaicfra'
GUIDEBOX_BASE_PATH = '/'.join([GUIDEBOX_HOST, GUIDEBOX_VER, GUIDEBOX_REGION_US, GUIDEBOX_API_KEY])
GUIDEBOX_MOVIES_PATH = '/'.join([GUIDEBOX_BASE_PATH, 'movies/all'])

# Initialize logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler('logs/guidebox_init.log')
fh.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)
logger.addHandler(fh)
logger.addHandler(ch)


def main(args):
    print('WARNING: This will delete entire %s index and repopulate.')
    proceed = input("Are you sure you want to proceed? (y/n): ")
    if (proceed.lower() == 'y'):
        clearIndex()
        populateAllMovies()
    else:
        print('Wise decision, carry on.')


def clearIndex():
    if es.indices.exists(INDEX_NAME):
        logger.info("deleting '%s' index...", INDEX_NAME)
        res = es.indices.delete(index=INDEX_NAME)
        logger.info("deletion response: %s", res)


def populateAllMovies():
    logger.info('Populating all movies from Guidebox')
    index = 0
    while index < 5000:
        movies = getMovies(index, 250)
        populateMovies(movies)
        index += movies['total_returned']
        time.sleep(1)


def getMovies(start, size):
    url = '/'.join([GUIDEBOX_MOVIES_PATH, str(start), str(size)])
    logger.info("GET %s", url)
    response = requests.get(url)
    if (response.ok):
        movies = response.json()
        logger.info('Succesfully retrieved %d movies', movies['total_returned'])
        return movies
    else:
        logger.error('Guidebox movies call failure: %s', response)
        response.raise_for_status()


def populateMovies(guidebox_response):
    all_movies = guidebox_response['results']
    bulk_request = []
    for movie in all_movies:
        id = movie['id']
        movie_data = getMovie(id)
        operation = {
            "index": {
                "_index": INDEX_NAME,
                "_type": TYPE_MOVIES,
                "_id": id
            }
        }
        bulk_request.append(operation)
        bulk_request.append(movie_data)
        time.sleep(1)
    es.bulk(index=INDEX_NAME, body=bulk_request, refresh=True)


def getMovie(id):
    movie = {}
    url = '/'.join([GUIDEBOX_BASE_PATH, 'movie', str(id)])
    logger.info('GET %s', url)
    response = requests.get(url)
    if (response.ok):
        movie_data = response.json()
        genres = ",".join([genre['title'] for genre in movie_data['genres']])
        movie = {
            "id": id,
            "title": movie_data['title'],
            "release_year": movie_data['release_year'],
            "imdb": movie_data['imdb'],
            "release_date": movie_data['release_date'],
            "rating": movie_data['rating'],
            "overview": movie_data['overview'],
            "poster_small": movie_data['poster_120x171'],
            "poster_medium": movie_data['poster_240x342'],
            "poster_large": movie_data['poster_400x570'],
            "genres": genres
        }
        logger.info('Succesfully retrieved movie %s: %s', movie['id'], movie['title'])
        return movie
    else:
        logger.error('Error retrieving movie %s', id)
        response.raise_for_status()


if __name__ == "__main__":
    main(sys.argv[1:])
